function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Copyright (c) 2015 - 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

import { LayerManager, WebMercatorViewport } from 'deck.gl/core';
import spy from './spy';
import gl from './setup-gl';

export function testInitializeLayer(_ref) {
  var layer = _ref.layer,
      viewport = _ref.viewport;

  var layerManager = new LayerManager(gl);
  layerManager.setViewport(new WebMercatorViewport(100, 100));

  try {
    layerManager.setLayers([layer]);
  } catch (error) {
    return error;
  }

  return null;
}

export function testUpdateLayer(_ref2) {
  var layer = _ref2.layer,
      viewport = _ref2.viewport,
      newProps = _ref2.newProps;

  var layerManager = new LayerManager(gl);
  layerManager.setViewport(new WebMercatorViewport(100, 100));

  try {
    layerManager.setLayers([layer]);
    layerManager.setLayers([layer.clone(newProps)]);
  } catch (error) {
    return error;
  }

  return null;
}

export function testDrawLayer(_ref3) {
  var layer = _ref3.layer,
      _ref3$uniforms = _ref3.uniforms,
      uniforms = _ref3$uniforms === undefined ? {} : _ref3$uniforms;

  var layerManager = new LayerManager(gl);
  layerManager.setViewport(new WebMercatorViewport(100, 100));

  try {
    layerManager.setLayers([layer]);
    layerManager.drawLayers();
  } catch (error) {
    return error;
  }

  return null;
}

/**
 * Initialize a layer, test layer update
 * on a series of newProps, assert on the resulting layer
 *
 * Note: Updates are called sequentially. updateProps will be merged
 * with previous props
 *
 * @param {Function} t - test function
 * @param {Object} opt - test options
 * @param {Object} opt.LayerComponent - The layer component class
 * @param {Array} opt.testCases - A list of testCases
 * @param {Object} opt.testCases.INITIAL_PROPS - The initial prop to initialize the layer with
 * @param {Array} opt.testCases.UPDATES - The list of updates to update
 * @param {Object} opt.testCases.UPDATES.updateProps - updated props
 * @param {Function} opt.testCases.UPDATES.assert - callbacks with updated layer, and oldState
 */

export function testLayerUpdates(t, _ref4) {
  var LayerComponent = _ref4.LayerComponent,
      testCases = _ref4.testCases;

  var layerManager = new LayerManager(gl);
  layerManager.setViewport(new WebMercatorViewport(100, 100));

  var newProps = Object.assign({}, testCases.INITIAL_PROPS);
  var layer = new LayerComponent(newProps);

  t.doesNotThrow(function () {
    return layerManager.setLayers([layer]);
  }, 'initialization of ' + LayerComponent.layerName + ' should not fail');

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function _loop() {
      var _step$value = _step.value,
          updateProps = _step$value.updateProps,
          assert = _step$value.assert;

      // Add on new props every iteration
      Object.assign(newProps, updateProps);

      // copy old state before update
      var oldState = Object.assign({}, layer.state);

      var newLayer = layer.clone(newProps);
      t.doesNotThrow(function () {
        return layerManager.setLayers([newLayer]);
      }, 'update ' + LayerComponent.layerName + ' should not fail');

      // call draw layer
      t.doesNotThrow(function () {
        return layerManager.drawLayers();
      }, 'draw ' + LayerComponent.layerName + ' should not fail');

      // assert on updated layer
      assert(newLayer, oldState, t);
    };

    for (var _iterator = testCases.UPDATES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

/**
 * Initialize a parent layer and its subLayer
 * update the parent layer a series of newProps, assert on the updated subLayer
 *
 * Note: Updates are called sequentially. updateProps will be merged
 * with previous props
 *
 * @param {Function} t - test function
 * @param {Object} opt - test options
 * @param {Object} opt.FunctionsToSpy - Functions that spied by spy
 * @param {Object} opt.LayerComponent - The layer component class
 * @param {Array} opt.testCases - A list of testCases
 * @param {Object} opt.testCases.INITIAL_PROPS - The initial prop to initialize the layer with
 * @param {Array} opt.testCases.UPDATES - The list of updates to update
 * @param {Object} opt.testCases.UPDATES.updateProps - updated props
 * @param {Function} opt.testCases.UPDATES.assert - callbacks with updated layer, and oldState
 */

export function testSubLayerUpdateTriggers(t, _ref5) {
  var FunctionsToSpy = _ref5.FunctionsToSpy,
      LayerComponent = _ref5.LayerComponent,
      testCases = _ref5.testCases;

  var layerManager = new LayerManager(gl);
  layerManager.setViewport(new WebMercatorViewport(100, 100));

  var newProps = Object.assign({}, testCases.INITIAL_PROPS);

  // initialize parent layer (generates and initializes)
  var layer = new LayerComponent(newProps);
  t.doesNotThrow(function () {
    return layerManager.setLayers([layer]);
  }, 'initialization of ' + LayerComponent.layerName + ' should not fail');

  // Create a map of spies that the test case can inspect
  var spies = FunctionsToSpy.reduce(function (accu, curr) {
    return Object.assign(accu, _defineProperty({}, curr, spy(LayerComponent.prototype, curr)));
  }, {});

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    var _loop2 = function _loop2() {
      var _step2$value = _step2.value,
          updateProps = _step2$value.updateProps,
          assert = _step2$value.assert;

      // Add on new props every iteration
      Object.assign(newProps, updateProps);

      var newLayer = layer.clone(newProps);
      t.doesNotThrow(function () {
        return layerManager.setLayers([newLayer]);
      }, 'update ' + LayerComponent.layerName + ' should not fail');

      // layer manager should handle match subLayer and tranfer state and props
      // here we assume subLayer matches copy over the new props
      // from a new subLayer
      var subLayer = layer.getSubLayers()[0];

      // assert on updated subLayer
      assert(subLayer, spies, t);

      // reset spies
      Object.keys(spies).forEach(function (k) {
        return spies[k].reset();
      });
    };

    for (var _iterator2 = testCases.UPDATES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      _loop2();
    }

    /*
    failures = testInitializeLayer({layer: subLayer});
    t.ok(!failures, `initialize ${LayerComponent.layerName} subLayer should not fail`);
    testCases.UPDATES.reduce((currentProps, {updateProps, assert}) => {
      // merge updated Props with initialProps
      const newProps = Object.assign({}, currentProps, updateProps);
      // call update layer with new props
      testUpdateLayer({layer, newProps});
      testUpdateLayer({layer: subLayer, newProps: newSubLayer.props});
      t.ok(!failures, `update ${LayerComponent.layerName} subLayer should not fail`);
      return newProps;
    }, testCases.INITIAL_PROPS);
    */

    // restore spies
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  Object.keys(spies).forEach(function (k) {
    return spies[k].restore();
  });
}

export function testCreateLayer(t, LayerComponent) {
  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var failures = false;
  var layer = null;

  try {
    layer = new LayerComponent(Object.assign({
      id: LayerComponent.layerName + '-0'
    }, props));

    t.ok(layer instanceof LayerComponent, LayerComponent.layerName + ' created');
  } catch (error) {
    failures = true;
  }
  t.ok(!failures, 'creating ' + LayerComponent.layerName + ' should not fail');

  return layer;
}

export function testCreateEmptyLayer(t, LayerComponent) {
  var props = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var failures = false;
  try {
    var emptyLayer = new LayerComponent(Object.assign({
      id: 'empty' + LayerComponent.layerName,
      data: [],
      pickable: true
    }, props));

    t.ok(emptyLayer instanceof LayerComponent, 'Empty ' + LayerComponent.layerName + ' created');
  } catch (error) {
    failures = true;
  }
  t.ok(!failures, 'creating empty ' + LayerComponent.layerName + ' should not fail');
}

export function testNullLayer(t, LayerComponent) {
  t.doesNotThrow(function () {
    return new LayerComponent({
      id: 'nullPathLayer',
      data: null,
      pickable: true
    });
  }, 'Null ' + LayerComponent.layerName + ' did not throw exception');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,