{"version":3,"sources":["../../src/core/model.js"],"names":["MSG_INSTANCED_PARAM_DEPRECATED","ERR_MODEL_PARAMS","LOG_DRAW_PRIORITY","DEPRECATED_PICKING_UNIFORMS","Model","gl","opts","init","vs","fs","modules","defines","moduleSettings","defaultUniforms","program","shaderCache","isInstanced","instanced","vertexCount","undefined","instanceCount","drawMode","uniforms","attributes","geometry","pickable","pick","render","onBeforeRender","onAfterRender","varyings","bufferMode","SEPARATE_ATTRIBS","timerQueryEnabled","_initializeProgram","Object","assign","setUniforms","getModuleUniforms","console","warn","buffers","samplers","userData","drawParams","dynamic","needsRedraw","setGeometry","setAttributes","Boolean","Number","isFinite","isSupported","timer","timeElapsedQuery","lastQueryReturned","stats","accumulatedFrameTime","averageFrameTime","profileFrameCount","delete","id","redraw","clearRedrawFlags","getNeedsRedraw","getVertexCount","_createBuffersFromAttributeDescriptors","getAttributes","setNeedsRedraw","somethingChanged","key","parameters","settings","framebuffer","vertexArray","transformFeedback","deprecated","updateModuleSettings","log","priority","message","resolvedUniforms","addViewUniforms","group","collapsed","setProgramState","_logAttributesAndUniforms","isIndexed","indexType","_timerQueryStart","draw","getDrawMode","_timerQueryEnd","unsetProgramState","groupEnd","use","setBuffers","checkAttributeBindings","unsetBuffers","camera","viewMatrix","modelMatrix","cameraUniforms","getUniforms","viewUniforms","getCoordinateUniforms","assembleResult","getProgram","forEach","uniform","beginTimeElapsedQuery","end","isResultAvailable","elapsedTime","getResult","lastFrameTime","attributeName","attribute","isGeneric","value","target","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","buffer","setData","data","setDataLayout","attributeTable","_getAttributesTable","header","table","unusedTable","unusedCount","undefinedOnly","count","attributeLocations","_attributeLocations","location","_getAttributeEntry","round","Math","num","type","size","verts","bytes","layout","length","BYTES_PER_ELEMENT","constructor","name","String","replace","isInteger","indexOf","varyingMap"],"mappings":"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","file":"model.js","sourcesContent":["/* eslint quotes: [\"error\", \"single\", { \"allowTemplateLiterals\": true }]*/\n// A scenegraph object node\nimport {GL, Buffer, Program, checkUniformValues, isWebGL} from '../webgl';\n// import {withParameters} from '../webgl/context-state';\nimport {getUniformsTable, areUniformsEqual} from '../webgl/uniforms';\nimport {getDrawMode} from '../geometry/geometry';\n\nimport Object3D from '../core/object-3d';\nimport {log, formatValue, isObjectEmpty} from '../utils';\nimport {MODULAR_SHADERS} from '../shadertools/shaders';\nimport {assembleShaders} from '../shadertools';\n\nimport {addModel, removeModel, logModel, getOverrides} from '../debug/seer-integration';\nimport Query from '../webgl/query';\nimport assert from 'assert';\n\nconst MSG_INSTANCED_PARAM_DEPRECATED = `\\\nWarning: Model constructor: parameter \"instanced\" renamed to \"isInstanced\".\nThis will become a hard error in a future version of luma.gl.`;\n\nconst ERR_MODEL_PARAMS = 'Model needs drawMode and vertexCount';\n\nconst LOG_DRAW_PRIORITY = 2;\n\n// These old picking uniforms should be avoided and we should use picking module\n// and set uniforms using Model class 'updateModuleSettings()'\nconst DEPRECATED_PICKING_UNIFORMS = ['renderPickingBuffer', 'pickingEnabled'];\n\n// Model abstract O3D Class\nexport default class Model extends Object3D {\n  constructor(gl, opts = {}) {\n    super(opts);\n    assert(isWebGL(gl));\n    this.gl = gl;\n    this.init(opts);\n  }\n\n  /* eslint-disable max-statements  */\n  /* eslint-disable complexity  */\n  init({\n    vs = null,\n    fs = null,\n\n    // 1: Modular shaders\n    modules = null,\n    defines = {},\n    moduleSettings = {},\n\n    // 2: Legacy shaders\n    defaultUniforms,\n\n    // 3: Pre-created program\n    program = null,\n\n    shaderCache = null,\n\n    isInstanced = false, // Enables instanced rendering\n    instanced, // deprecated\n    vertexCount = undefined,\n    instanceCount = 0,\n\n    // Extra uniforms and attributes (beyond geometry, material, camera)\n    drawMode,\n    uniforms = {},\n    attributes = {},\n    geometry = null,\n\n    // Picking\n    pickable = true,\n    pick = null,\n    render = null,\n    onBeforeRender = () => {},\n    onAfterRender = () => {},\n\n    // TransformFeedback\n    varyings = null,\n    bufferMode = GL.SEPARATE_ATTRIBS,\n\n    // Other opts\n    timerQueryEnabled = false\n  } = {}) {\n    this._initializeProgram({\n      vs,\n      fs,\n      modules,\n      defines,\n      moduleSettings,\n      defaultUniforms,\n      program,\n      shaderCache,\n      varyings,\n      bufferMode\n    });\n\n    this.uniforms = {};\n\n    // Make sure we have some reasonable default uniforms in place\n    uniforms = Object.assign({}, this.program.defaultUniforms, uniforms);\n    this.setUniforms(uniforms);\n    // Get all default uniforms\n    this.setUniforms(this.getModuleUniforms());\n    // Get unforms for supplied parameters\n    this.setUniforms(this.getModuleUniforms(moduleSettings));\n\n    if (instanced) {\n      /* global console */\n      /* eslint-disable no-console */\n      console.warn(MSG_INSTANCED_PARAM_DEPRECATED);\n      isInstanced = isInstanced || instanced;\n    }\n\n    // TODO - remove?\n    this.buffers = {};\n    this.samplers = {};\n    this.userData = {};\n    this.drawParams = {};\n    this.dynamic = false;\n    this.needsRedraw = true;\n\n    // Attributes and buffers\n    if (geometry) {\n      this.setGeometry(geometry);\n    }\n\n    this.attributes = {};\n    this.setAttributes(attributes);\n\n    // geometry might have set drawMode and vertexCount\n    if (drawMode !== undefined) {\n      this.drawMode = getDrawMode(drawMode);\n    }\n    if (vertexCount !== undefined) {\n      this.vertexCount = vertexCount;\n    }\n    this.isInstanced = isInstanced;\n    this.instanceCount = instanceCount;\n\n    // picking options\n    this.pickable = Boolean(pickable);\n    this.pick = pick || (() => false);\n\n    this.onBeforeRender = onBeforeRender;\n    this.onAfterRender = onAfterRender;\n\n    // assert(program || program instanceof Program);\n    assert(this.drawMode !== undefined && Number.isFinite(this.vertexCount), ERR_MODEL_PARAMS);\n\n    this.timerQueryEnabled = timerQueryEnabled && Query.isSupported(this.gl, {timer: true});\n    this.timeElapsedQuery = undefined;\n    this.lastQueryReturned = true;\n\n    this.stats = {\n      accumulatedFrameTime: 0,\n      averageFrameTime: 0,\n      profileFrameCount: 0\n    };\n  }\n  /* eslint-enable max-statements */\n\n  delete() {\n    this.program.delete();\n    removeModel(this.id);\n  }\n\n  destroy() {\n    this.delete();\n  }\n\n  setNeedsRedraw(redraw = true) {\n    this.needsRedraw = redraw;\n    return this;\n  }\n\n  getNeedsRedraw({clearRedrawFlags = false} = {}) {\n    let redraw = false;\n    redraw = redraw || this.needsRedraw;\n    this.needsRedraw = this.needsRedraw && !clearRedrawFlags;\n    redraw = redraw || this.geometry.getNeedsRedraw({clearRedrawFlags});\n    return redraw;\n  }\n\n  setDrawMode(drawMode) {\n    this.drawMode = getDrawMode(drawMode);\n    return this;\n  }\n\n  getDrawMode() {\n    return this.drawMode;\n  }\n\n  setVertexCount(vertexCount) {\n    assert(Number.isFinite(vertexCount));\n    this.vertexCount = vertexCount;\n    return this;\n  }\n\n  getVertexCount() {\n    return this.vertexCount;\n  }\n\n  setInstanceCount(instanceCount) {\n    assert(Number.isFinite(instanceCount));\n    this.instanceCount = instanceCount;\n    return this;\n  }\n\n  getInstanceCount() {\n    return this.instanceCount;\n  }\n\n  getProgram() {\n    return this.program;\n  }\n\n  get varyingMap() {\n    return this.program.varyingMap;\n  }\n\n  // TODO - just set attributes, don't hold on to geometry\n  setGeometry(geometry) {\n    this.geometry = geometry;\n    this.vertexCount = geometry.getVertexCount();\n    this.drawMode = geometry.drawMode;\n    this._createBuffersFromAttributeDescriptors(this.geometry.getAttributes());\n    this.setNeedsRedraw();\n    return this;\n  }\n\n  getAttributes() {\n    return this.attributes;\n  }\n\n  setAttributes(attributes = {}) {\n    // Reutrn early if no attributes to set.\n    if (isObjectEmpty(attributes)) {\n      return this;\n    }\n\n    Object.assign(this.attributes, attributes);\n    this._createBuffersFromAttributeDescriptors(attributes);\n    this.setNeedsRedraw();\n\n    return this;\n  }\n\n  getUniforms() {\n    return this.uniforms;\n  }\n\n  // TODO - should actually set the uniforms\n  setUniforms(uniforms = {}) {\n    // TODO: we are still setting these uniforms in deck.gl so we don't break any external\n    // application, these are marked deprecated in 5.0, remove them in deck.gl in 6.0.\n    // Disabling since it gets too noisy in console, these are documented as deprecated.\n    // this._checkForDeprecatedUniforms(uniforms);\n    let somethingChanged = false;\n    for (const key in uniforms) {\n      if (!areUniformsEqual(this.uniforms[key], uniforms[key])) {\n        somethingChanged = true;\n        break;\n      }\n    }\n\n    if (somethingChanged) {\n      checkUniformValues(uniforms, this.id);\n      Object.assign(this.uniforms, uniforms);\n      this.setNeedsRedraw();\n    }\n    return this;\n  }\n\n  // getModuleUniforms (already on object)\n\n  updateModuleSettings(opts) {\n    const uniforms = this.getModuleUniforms(opts);\n    return this.setUniforms(uniforms);\n  }\n\n  draw({\n    moduleSettings = null,\n    uniforms = {},\n    attributes = {},\n    samplers = {},\n    parameters = {},\n    settings,\n    framebuffer = null,\n    vertexArray = null,\n    transformFeedback = null\n  } = {}) {\n    if (settings) {\n      log.deprecated('settings', 'parameters');\n      parameters = settings;\n    }\n\n    if (moduleSettings) {\n      this.updateModuleSettings(moduleSettings);\n    }\n\n    if (framebuffer) {\n      parameters = Object.assign(parameters, {framebuffer});\n    }\n\n    this.render(uniforms, attributes, samplers, transformFeedback, parameters, vertexArray);\n\n    if (framebuffer) {\n      framebuffer.log({priority: LOG_DRAW_PRIORITY, message: `Rendered to ${framebuffer.id}`});\n    }\n\n    return this;\n  }\n\n  /* eslint-disable max-params  */\n  render(\n    uniforms = {},\n    attributes = {},\n    samplers = {},\n    transformFeedback = null,\n    parameters = {},\n    vertexArray = null\n  ) {\n    addModel(this);\n\n    const resolvedUniforms = this.addViewUniforms(uniforms);\n    getOverrides(this.id, resolvedUniforms);\n\n    this.setUniforms(resolvedUniforms);\n    this.setAttributes(attributes);\n    Object.assign(this.samplers, samplers);\n\n    log.group(LOG_DRAW_PRIORITY,\n      `>>> RENDERING MODEL ${this.id}`, {collapsed: log.priority <= 2});\n\n    this.setProgramState({vertexArray});\n\n    this._logAttributesAndUniforms(2, resolvedUniforms);\n\n    this.onBeforeRender();\n\n    const drawParams = this.drawParams;\n    if (drawParams.isInstanced && !this.isInstanced) {\n      log.warn('Found instanced attributes on non-instanced model');\n    }\n    const {isIndexed, indexType} = drawParams;\n    const {isInstanced, instanceCount} = this;\n\n    this._timerQueryStart();\n\n    this.program.draw({\n      parameters,\n      drawMode: this.getDrawMode(),\n      vertexCount: this.getVertexCount(),\n      vertexArray,\n      transformFeedback,\n      isIndexed,\n      indexType,\n      isInstanced,\n      instanceCount\n    });\n\n    this._timerQueryEnd();\n\n    this.onAfterRender();\n\n    this.unsetProgramState();\n\n    this.setNeedsRedraw(false);\n\n    log.groupEnd(LOG_DRAW_PRIORITY, `>>> RENDERING MODEL ${this.id}`);\n\n    return this;\n  }\n  /* eslint-enable max-params  */\n\n  setProgramState({vertexArray = null} = {}) {\n    const {program} = this;\n    program.use();\n    this.drawParams = {};\n    program.setBuffers(this.buffers, {drawParams: this.drawParams});\n    program.checkAttributeBindings({vertexArray});\n    program.setUniforms(this.uniforms, this.samplers);\n    return this;\n  }\n\n  unsetProgramState() {\n    // Ensures all vertex attributes are disabled and ELEMENT_ARRAY_BUFFER\n    // is unbound\n    this.program.unsetBuffers();\n    return this;\n  }\n\n  // DEPRECATED METHODS\n\n  // TODO - uniform names are too strongly linked camera <=> default shaders\n  // At least all special handling is collected here.\n  addViewUniforms(uniforms) {\n    // TODO - special treatment of these parameters should be removed\n    const {camera, viewMatrix, modelMatrix} = uniforms;\n    // Camera exposes uniforms that can be used directly in shaders\n    const cameraUniforms = camera ? camera.getUniforms() : {};\n\n    const viewUniforms = viewMatrix ?\n      this.getCoordinateUniforms(viewMatrix, modelMatrix) : {};\n\n    return Object.assign({}, uniforms, cameraUniforms, viewUniforms);\n  }\n\n  // PRIVATE METHODS\n\n  _initializeProgram({\n    vs,\n    fs,\n    modules,\n    defines,\n    moduleSettings,\n    defaultUniforms,\n    program,\n    shaderCache,\n    varyings,\n    bufferMode\n  }) {\n\n    this.getModuleUniforms = x => {};\n\n    if (!program) {\n      // Assign default shaders if none are provided\n      if (!vs) {\n        vs = MODULAR_SHADERS.vs;\n      }\n      if (!fs) {\n        fs = MODULAR_SHADERS.fs;\n      }\n\n      const assembleResult = assembleShaders(this.gl, {vs, fs, modules, defines});\n      ({vs, fs} = assembleResult);\n\n      if (shaderCache) {\n        program = shaderCache.getProgram(this.gl, {vs, fs, id: this.id});\n      } else {\n        program = new Program(this.gl, {vs, fs, varyings, bufferMode});\n      }\n\n      const {getUniforms} = assembleResult;\n      this.getModuleUniforms = getUniforms || (x => {});\n    }\n\n    this.program = program;\n    assert(this.program instanceof Program, 'Model needs a program');\n  }\n  /* eslint-enable complexity */\n\n  _checkForDeprecatedUniforms(uniforms) {\n    // deprecated picking uniforms\n    DEPRECATED_PICKING_UNIFORMS.forEach((uniform) => {\n      if (uniform in uniforms) {\n        log.deprecated(uniform, 'use picking shader module and Model class updateModuleSettings()');\n      }\n    });\n  }\n\n  _timerQueryStart() {\n    if (this.timerQueryEnabled === true) {\n      if (!this.timeElapsedQuery) {\n        this.timeElapsedQuery = new Query(this.gl);\n      }\n      if (this.lastQueryReturned) {\n        this.lastQueryReturned = false;\n        this.timeElapsedQuery.beginTimeElapsedQuery();\n      }\n    }\n  }\n\n  _timerQueryEnd() {\n    if (this.timerQueryEnabled === true) {\n      this.timeElapsedQuery.end();\n      // TODO: Skip results if 'gl.getParameter(this.ext.GPU_DISJOINT_EXT)' returns false\n      // should this be incorporated into Query object?\n      if (this.timeElapsedQuery.isResultAvailable()) {\n        this.lastQueryReturned = true;\n        const elapsedTime = this.timeElapsedQuery.getResult();\n\n        // Update stats (e.g. for seer)\n        this.stats.lastFrameTime = elapsedTime;\n        this.stats.accumulatedFrameTime += elapsedTime;\n        this.stats.profileFrameCount++;\n        this.stats.averageFrameTime =\n          this.stats.accumulatedFrameTime / this.stats.profileFrameCount;\n\n        // Log stats\n        log.log(LOG_DRAW_PRIORITY, `\\\nGPU time ${this.program.id}: ${this.stats.lastFrameTime}ms \\\naverage ${this.stats.averageFrameTime}ms \\\naccumulated: ${this.stats.accumulatedFrameTime}ms \\\ncount: ${this.stats.profileFrameCount}`\n        );\n      }\n    }\n  }\n\n  // Makes sure buffers are created for all attributes\n  // and that the program is updated with those buffers\n  // TODO - do we need the separation between \"attributes\" and \"buffers\"\n  // couldn't apps just create buffers directly?\n  _createBuffersFromAttributeDescriptors(attributes) {\n    const {program: {gl}} = this;\n\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n\n      if (attribute instanceof Buffer) {\n        this.buffers[attributeName] = attribute;\n      } else if (attribute.isGeneric) {\n        this.buffers[attributeName] = attribute.value;\n      } else {\n        // Autocreate a buffer\n        this.buffers[attributeName] =\n          this.buffers[attributeName] || new Buffer(gl, {\n            target: attribute.isIndexed ? GL.ELEMENT_ARRAY_BUFFER : GL.ARRAY_BUFFER\n          });\n\n        const buffer = this.buffers[attributeName];\n        buffer\n          .setData({data: attribute.value})\n          .setDataLayout(attribute);\n      }\n    }\n\n    return this;\n  }\n\n  _logAttributesAndUniforms(priority, uniforms = {}) {\n    if (log.priority >= priority) {\n      const attributeTable = this._getAttributesTable({\n        header: `${this.id} attributes`,\n        program: this.program,\n        attributes: Object.assign({}, this.geometry.attributes, this.attributes)\n      });\n      log.table(priority, attributeTable);\n\n      const {table, unusedTable, unusedCount} = getUniformsTable({\n        header: `${this.id} uniforms`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms)\n      });\n\n      log.table(priority, table);\n      log.log(priority, `${unusedCount || 'No'} unused uniforms `, unusedTable);\n    } else {\n      // Always log missing uniforms\n      const {table, count} = getUniformsTable({\n        header: `${this.id} uniforms`,\n        program: this.program,\n        uniforms: Object.assign({}, this.uniforms, uniforms),\n        undefinedOnly: true\n      });\n      if (count > 0) {\n        log.table(priority, table);\n      }\n    }\n\n    logModel(this, uniforms);\n  }\n\n  // Todo move to attributes manager\n  _getAttributesTable({\n    attributes,\n    header = 'Attributes',\n    instanced,\n    program\n  } = {}) {\n    assert(program);\n    const attributeLocations = program._attributeLocations;\n    const table = {}; // {[header]: {}};\n\n    // Add used attributes\n    for (const attributeName in attributeLocations) {\n      const attribute = attributes[attributeName];\n      const location = attributeLocations[attributeName];\n      table[attributeName] = this._getAttributeEntry(attribute, location, header);\n    }\n\n    // Add any unused attributes\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      if (!table[attributeName]) {\n        table[attributeName] = this._getAttributeEntry(attribute, null, header);\n      }\n    }\n\n    return table;\n  }\n\n  _getAttributeEntry(attribute, location, header) {\n    const round = num => Math.round(num * 10) / 10;\n\n    let type = 'NOT PROVIDED';\n    let instanced = 0;\n    let size = 'N/A';\n    let verts = 'N/A';\n    let bytes = 'N/A';\n    let value = 'N/A';\n\n    if (attribute && location === null) {\n      location = attribute.isIndexed ? 'ELEMENT_ARRAY_BUFFER' : 'NOT USED';\n    }\n\n    if (attribute instanceof Buffer) {\n      const buffer = attribute;\n      type = buffer.layout.type;\n      instanced = buffer.layout.instanced;\n      size = buffer.layout.size;\n      verts = round(buffer.data.length / buffer.layout.size);\n      bytes = buffer.data.length * buffer.data.BYTES_PER_ELEMENT;\n    } else if (attribute) {\n      type = attribute.value.constructor.name;\n      instanced = attribute.instanced;\n      size = attribute.size;\n      verts = round(attribute.value.length / attribute.size);\n      bytes = attribute.value.length * attribute.value.BYTES_PER_ELEMENT;\n      value = attribute.value;\n    }\n\n    // Generate a type name by dropping Array from Float32Array etc.\n    type = String(type).replace('Array', '');\n    // Look for 'nt' to detect integer types, e.g. Int32Array, Uint32Array\n    const isInteger = type.indexOf('nt') !== -1;\n\n    return {\n      'Inst/Verts/Comps/Bytes/Type/Loc':\n        `${instanced ? 'I ' : 'P '} ${verts} (x${size}=${bytes} ${type}) loc=${location}`,\n      [header]: formatValue(value, {size, isInteger})\n    };\n  }\n\n  // DEPRECATED / REMOVED\n  isPickable() {\n    return this.pickable;\n  }\n\n  setPickable(pickable = true) {\n    this.pickable = Boolean(pickable);\n    return this;\n  }\n\n  getGeometry() {\n    return this.geometry;\n  }\n}\n"]}