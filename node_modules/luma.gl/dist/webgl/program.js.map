{"version":3,"sources":["../../src/webgl/program.js"],"names":["getUniformDescriptors","getVaryingMap","LOG_PROGRAM_PERF_PRIORITY","Program","gl","opts","initialize","vertexAttributes","getDefaultArray","Object","seal","_setId","id","vs","fs","defaultUniforms","varyings","bufferMode","SEPARATE_ATTRIBS","transformFeedbackVaryings","handle","varyingMap","_compileAndLink","vertexArray","filledLocations","attributeName","_attributeToLocationMap","location","_warnedLocations","warn","unsetBuffers","useProgram","drawMode","TRIANGLES","vertexCount","offset","start","end","isIndexed","indexType","UNSIGNED_SHORT","isInstanced","instanceCount","transformFeedback","uniforms","samplers","parameters","bind","primitiveMode","begin","setUniforms","ext","drawElementsInstanced","isNaN","drawElementsRange","drawElements","drawArraysInstanced","drawArrays","buffers","clear","drawParams","clearBindings","_sortBuffersByLocation","locations","elements","length","bufferName","buffer","disable","divisor","layout","instanced","setBuffer","setDivisor","enable","setGeneric","array","type","_attributeCount","i","bindBuffer","ELEMENT_ARRAY_BUFFER","uniformName","uniform","uniformSetter","_uniformSetters","sampler","texture","textureIndex","undefined","_textureIndexCounter","_getParameter","ACTIVE_ATTRIBUTES","getAttribLocation","getActiveAttrib","ACTIVE_UNIFORMS","index","getActiveUniform","name","getUniformLocation","getUniform","program","result","getTransformFeedbackVarying","varyingName","getFragDataLocation","getAttachedShaders","attachShader","time","_getName","linkProgram","timeEnd","debug","priority","validateProgram","linked","getProgramParameter","LINK_STATUS","Error","getProgramInfoLog","_queryAttributeLocations","_queryUniformLocations","Array","target","_print","log","isEnabled","createProgram","deleteProgram","programName","getName","replace","shaderHandles","shaderHandle","getShaderParameter","SHADER_TYPE","VERTEX_SHADER","FRAGMENT_SHADER","pname","getAttributeCount","getAttributeInfo","getAttributeLocation","_uniformCount","getUniformCount","info","getUniformInfo","parsedName","isArray","uniformDescriptors","descriptor","INTERLEAVED_ATTRIBS","indexIncrement","varying"],"mappings":"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","file":"program.js","sourcesContent":["/* eslint-disable no-inline-comments */\nimport GL from './api';\nimport {assertWebGL2Context, isWebGL2} from './context';\nimport {withParameters} from './context-state';\nimport VertexArray from './vertex-array';\nimport Resource from './resource';\nimport Texture from './texture';\nimport Framebuffer from './framebuffer';\nimport {getTransformFeedbackMode} from './transform-feedback';\nimport {parseUniformName, getUniformSetter} from './uniforms';\nimport {VertexShader, FragmentShader} from './shader';\nimport Buffer from './buffer';\nimport {log, uid, isObjectEmpty} from '../utils';\nimport assert from 'assert';\n\nconst LOG_PROGRAM_PERF_PRIORITY = 3;\n\n// const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;\n// const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : 0x8C80,\n// TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84,\n// TRANSFORM_FEEDBACK_BUFFER_SIZE : 0x8C85,\n// TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88,\n// MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A,\n// MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B,\n// INTERLEAVED_ATTRIBS: 0x8C8C,\n// SEPARATE_ATTRIBS : 0x8C8D,\n\nexport default class Program extends Resource {\n\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n    this.initialize(opts);\n    this.vertexAttributes = VertexArray.getDefaultArray(gl);\n    Object.seal(this);\n\n    this._setId(opts.id);\n  }\n\n  initialize({vs, fs, defaultUniforms, varyings, bufferMode = GL.SEPARATE_ATTRIBS} = {}) {\n    // Create shaders if needed\n    this.vs = typeof vs === 'string' ? new VertexShader(this.gl, vs) : vs;\n    this.fs = typeof fs === 'string' ? new FragmentShader(this.gl, fs) : fs;\n\n    assert(this.vs instanceof VertexShader, 'Program: bad vertex shader');\n    assert(this.fs instanceof FragmentShader, 'Program: bad fragment shader');\n\n    this.defaultUniforms = defaultUniforms;\n\n    // Setup varyings if supplied\n    if (varyings) {\n      assertWebGL2Context(this.gl);\n      this.varyings = varyings;\n      this.gl.transformFeedbackVaryings(this.handle, varyings, bufferMode);\n      this.varyingMap = getVaryingMap(varyings, bufferMode);\n    } else {\n      this.varyingMap = {};\n    }\n\n    this._compileAndLink();\n\n    return this;\n  }\n\n  // Generates warning if a vertex shader attribute is not setup.\n  checkAttributeBindings({vertexArray}) {\n    const filledLocations = vertexArray ?\n      vertexArray.filledLocations : this.vertexAttributes.filledLocations;\n    for (const attributeName in this._attributeToLocationMap) {\n      const location = this._attributeToLocationMap[attributeName];\n      if (!filledLocations[location] && !this._warnedLocations[location]) {\n        // throw new Error(`Program ${this.id}: ` +\n        //   `Attribute ${location}:${attributeName} not supplied`);\n        log.warn(`Program ${this.id}: Attribute ${location}:${attributeName} not supplied`);\n        this._warnedLocations[location] = true;\n      }\n    }\n    return this;\n  }\n\n  reset() {\n    this.unsetBuffers();\n    // TODO - reset uniforms and attributes to initial state\n  }\n\n  use() {\n    this.gl.useProgram(this.handle);\n    return this;\n  }\n\n  // A good thing about webGL is that there are so many ways to draw things,\n  // e.g. depending on whether data is indexed and/or isInstanced.\n  // This function unifies those into a single call with simple parameters\n  // that have sane defaults.\n  draw({\n    drawMode = GL.TRIANGLES,\n    vertexCount,\n    offset = 0,\n    start,\n    end,\n    isIndexed = false,\n    indexType = GL.UNSIGNED_SHORT,\n    isInstanced = false,\n    instanceCount = 0,\n    vertexArray = null,\n    transformFeedback = null,\n    uniforms = {},\n    samplers = {},\n    parameters = {}\n  }) {\n    vertexArray = vertexArray || VertexArray.getDefaultArray(this.gl);\n    vertexArray.bind(() => {\n\n      this.gl.useProgram(this.handle);\n\n      if (transformFeedback) {\n        const primitiveMode = getTransformFeedbackMode({drawMode});\n        transformFeedback.begin(primitiveMode);\n      }\n\n      this.setUniforms(uniforms, samplers);\n\n      withParameters(this.gl, parameters,\n        () => {\n          // TODO - Use polyfilled WebGL2RenderingContext instead of ANGLE extension\n          if (isIndexed && isInstanced) {\n            this.ext.drawElementsInstanced(drawMode, vertexCount, indexType, offset, instanceCount);\n          } else if (isIndexed && isWebGL2(this.gl) && !isNaN(start) && !isNaN(end)) {\n            this.gl.drawElementsRange(drawMode, start, end, vertexCount, indexType, offset);\n          } else if (isIndexed) {\n            this.gl.drawElements(drawMode, vertexCount, indexType, offset);\n          } else if (isInstanced) {\n            this.ext.drawArraysInstanced(drawMode, offset, vertexCount, instanceCount);\n          } else {\n            this.gl.drawArrays(drawMode, offset, vertexCount);\n          }\n        }\n      );\n\n      // this.gl.useProgram(null);\n\n      if (transformFeedback) {\n        transformFeedback.end();\n      }\n\n    });\n\n    return this;\n  }\n\n  /**\n   * Attach a map of Buffers values to a program\n   * Only attributes with names actually present in the linked program\n   * will be updated. Other supplied buffers will be ignored.\n   *\n   * @param {Object} buffers - An object map with attribute names being keys\n   *  and values are expected to be instances of Buffer.\n   * @returns {Program} Returns itself for chaining.\n   */\n  /* eslint-disable max-statements */\n  setBuffers(buffers, {clear = true, drawParams = {}} = {}) {\n    if (clear) {\n      this.vertexAttributes.clearBindings();\n    }\n\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    drawParams.isInstanced = false;\n    drawParams.isIndexed = false;\n    drawParams.indexType = null;\n\n    const {locations, elements} = this._sortBuffersByLocation(buffers);\n\n    // Process locations in order\n    for (let location = 0; location < locations.length; ++location) {\n      const bufferName = locations[location];\n      const buffer = buffers[bufferName];\n      // DISABLE MISSING ATTRIBUTE\n      if (!buffer) {\n        this.vertexAttributes.disable(location);\n      } else if (buffer instanceof Buffer) {\n        const divisor = buffer.layout.instanced ? 1 : 0;\n        this.vertexAttributes.setBuffer({location, buffer});\n        this.vertexAttributes.setDivisor(location, divisor);\n        drawParams.isInstanced = buffer.layout.instanced > 0;\n        this.vertexAttributes.enable(location);\n      } else {\n        this.vertexAttributes.setGeneric({location, array: buffer});\n        this.vertexAttributes.disable(location, true);\n      }\n    }\n\n    // SET ELEMENTS ARRAY BUFFER\n    if (elements) {\n      const buffer = buffers[elements];\n      buffer.bind();\n      drawParams.isIndexed = true;\n      drawParams.indexType = buffer.layout.type;\n    }\n\n    return this;\n  }\n  /* eslint-enable max-statements */\n\n  /*\n   * @returns {Program} Returns itself for chaining.\n   */\n  unsetBuffers() {\n    const length = this._attributeCount;\n    for (let i = 1; i < length; ++i) {\n      // this.vertexAttributes.setDivisor(i, 0);\n      this.vertexAttributes.disable(i);\n    }\n\n    // Clear elements buffer\n    this.gl.bindBuffer(GL.ELEMENT_ARRAY_BUFFER, null);\n    return this;\n  }\n\n  /**\n   * Apply a set of uniform values to a program\n   * Only uniforms with names actually present in the linked program\n   * will be updated.\n   * other uniforms will be ignored\n   *\n   * @param {Object} uniformMap - An object with names being keys\n   * @returns {Program} - returns itself for chaining.\n   */\n  /* eslint-disable max-depth */\n  setUniforms(uniforms, samplers = {}) {\n    for (const uniformName in uniforms) {\n      let uniform = uniforms[uniformName];\n      const uniformSetter = this._uniformSetters[uniformName];\n      const sampler = samplers[uniformName];\n\n      if (uniformSetter) {\n        if (uniform instanceof Framebuffer) {\n          uniform = uniform.texture;\n        }\n        if (uniform instanceof Texture) {\n          if (uniformSetter.textureIndex === undefined) {\n            uniformSetter.textureIndex = this._textureIndexCounter++;\n          }\n\n          // Bind texture to index\n          const texture = uniform;\n          const {textureIndex} = uniformSetter;\n\n          texture.bind(textureIndex);\n\n          // Bind a sampler (if supplied) to index\n          if (sampler) {\n            sampler.bind(textureIndex);\n          }\n\n          // Set the uniform sampler to the texture index\n          uniformSetter(textureIndex);\n        } else {\n          // Just set the value\n          uniformSetter(uniform);\n        }\n      }\n    }\n\n    return this;\n  }\n  /* eslint-enable max-depth */\n\n  // setTransformFeedbackBuffers(buffers) {\n  //   for (const buffer of buffers) {\n  //     buffer.bindBase()\n  //   }\n  // }\n\n  /**\n   * ATTRIBUTES API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getAttributeCount() {\n    return this._getParameter(GL.ACTIVE_ATTRIBUTES);\n  }\n\n  /**\n   * Returns location (index) of a name\n   * @param {String} attributeName - name of an attribute\n   *   (matches name in a linked shader)\n   * @returns {Number} - // array of actual attribute names from shader linking\n   */\n  getAttributeLocation(attributeName) {\n    return this.gl.getAttribLocation(this.handle, attributeName);\n  }\n\n  /**\n   * Returns an object with info about attribute at index \"location\"/\n   * @param {int} location - index of an attribute\n   * @returns {WebGLActiveInfo} - info about an active attribute\n   *   fields: {name, size, type}\n   */\n  getAttributeInfo(location) {\n    return this.gl.getActiveAttrib(this.handle, location);\n  }\n\n  /**\n   * UNIFORMS API\n   * (Locations are numeric indices)\n   * @return {Number} count\n   */\n  getUniformCount() {\n    return this._getParameter(GL.ACTIVE_UNIFORMS);\n  }\n\n  /*\n   * @returns {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getUniformInfo(index) {\n    return this.gl.getActiveUniform(this.handle, index);\n  }\n\n  /*\n   * @returns {WebGLUniformLocation} - opaque object representing location\n   * of uniform, used by setter methods\n   */\n  getUniformLocation(name) {\n    return this.gl.getUniformLocation(this.handle, name);\n  }\n\n  getUniformValue(location) {\n    return this.gl.getUniform(this.handle, location);\n  }\n\n  // WebGL2\n  /**\n   * @param {GLuint} index\n   * @return {WebGLActiveInfo} - object with {name, size, type}\n   */\n  getVarying(program, index) {\n    const result = this.gl.getTransformFeedbackVarying(program, index);\n    return result;\n  }\n\n  // Retrieves the assigned color number binding for the user-defined varying\n  // out variable name for program. program must have previously been linked.\n  getFragDataLocation(varyingName) {\n    assertWebGL2Context(this.gl);\n    return this.gl.getFragDataLocation(this.handle, varyingName);\n  }\n\n  // @returns {WebGLShader[]} - array of attached WebGLShader objects\n  getAttachedShaders() {\n    return this.gl.getAttachedShaders(this.handle);\n  }\n\n  // PRIVATE METHODS\n\n  _compileAndLink() {\n    const {gl} = this;\n    gl.attachShader(this.handle, this.vs.handle);\n    gl.attachShader(this.handle, this.fs.handle);\n    log.time(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`);\n    gl.linkProgram(this.handle);\n    log.timeEnd(LOG_PROGRAM_PERF_PRIORITY, `linkProgram for ${this._getName()}`);\n\n    // Avoid checking program linking error in production\n    if (gl.debug || log.priority > 0) {\n      gl.validateProgram(this.handle);\n      const linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n      if (!linked) {\n        throw new Error(`Error linking ${gl.getProgramInfoLog(this.handle)}`);\n      }\n    }\n\n    this._queryAttributeLocations();\n    this._queryUniformLocations();\n  }\n\n  _sortBuffersByLocation(buffers) {\n    let elements = null;\n    let locations = [];\n\n    // Reutrn early if no buffers to be bound.\n    if (isObjectEmpty(buffers)) {\n      return {locations, elements};\n    }\n\n    locations = new Array(this._attributeCount);\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n      const location = this._attributeToLocationMap[bufferName];\n      if (location === undefined) {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER && elements) {\n          throw new Error(`${this._print(bufferName)} duplicate GL.ELEMENT_ARRAY_BUFFER`);\n        } else if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          elements = bufferName;\n        } else if (!this._warnedLocations[location]) {\n          log.log(2, `${this._print(bufferName)} not used`);\n          this._warnedLocations[location] = true;\n        }\n      } else {\n        if (buffer.target === GL.ELEMENT_ARRAY_BUFFER) {\n          throw new Error(`${this._print(bufferName)}:${location} ` +\n            'has both location and type gl.ELEMENT_ARRAY_BUFFER');\n        }\n        locations[location] = bufferName;\n      }\n    }\n    return {locations, elements};\n  }\n\n  // Check that all active attributes are enabled\n  _areAllAttributesEnabled() {\n    const length = this._attributeCount;\n    for (let i = 0; i < length; ++i) {\n      if (!this.vertexAttributes.isEnabled(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _print(bufferName) {\n    return `Program ${this.id}: Attribute ${bufferName}`;\n  }\n\n  _createHandle() {\n    return this.gl.createProgram();\n  }\n\n  _deleteHandle() {\n    this.gl.deleteProgram(this.handle);\n  }\n\n  _getName() {\n    let programName = this.vs.getName() || this.fs.getName();\n    programName = programName.replace(/shader/i, '');\n    programName = programName ? `${programName}-program` : 'program';\n    return programName;\n  }\n\n  _getOptionsFromHandle(handle) {\n    const shaderHandles = this.gl.getAttachedShaders(handle);\n    const opts = {};\n    for (const shaderHandle of shaderHandles) {\n      const type = this.gl.getShaderParameter(this.handle, GL.SHADER_TYPE);\n      switch (type) {\n      case GL.VERTEX_SHADER:\n        opts.vs = new VertexShader({handle: shaderHandle});\n        break;\n      case GL.FRAGMENT_SHADER:\n        opts.fs = new FragmentShader({handle: shaderHandle});\n        break;\n      default:\n      }\n    }\n    return opts;\n  }\n\n  _getParameter(pname) {\n    return this.gl.getProgramParameter(this.handle, pname);\n  }\n\n  // query attribute locations and build name to location map.\n  _queryAttributeLocations() {\n    this._attributeToLocationMap = {};\n    this._attributeCount = this.getAttributeCount();\n    for (let location = 0; location < this._attributeCount; location++) {\n      const name = this.getAttributeInfo(location).name;\n      this._attributeToLocationMap[name] = this.getAttributeLocation(name);\n    }\n    this._warnedLocations = {};\n  }\n\n  // query uniform locations and build name to setter map.\n  _queryUniformLocations() {\n    const {gl} = this;\n    this._uniformSetters = {};\n    this._uniformCount = this.getUniformCount();\n    for (let i = 0; i < this._uniformCount; i++) {\n      const info = this.getUniformInfo(i);\n      const parsedName = parseUniformName(info.name);\n      const location = this.getUniformLocation(parsedName.name);\n      this._uniformSetters[parsedName.name] =\n        getUniformSetter(gl, location, info, parsedName.isArray);\n    }\n    this._textureIndexCounter = 0;\n  }\n\n  _setId(id) {\n    // If program is not named, name it after shader names\n    if (!id) {\n      const programName = this._getName();\n      // TODO - this.id will already have been initialized\n      this.id = uid(programName);\n    }\n  }\n}\n\n// create uniform setters\n// Map of uniform names to setter functions\nexport function getUniformDescriptors(gl, program) {\n  const uniformDescriptors = {};\n  const length = program.getUniformCount();\n  for (let i = 0; i < length; i++) {\n    const info = program.getUniformInfo(i);\n    const location = program.getUniformLocation(info.name);\n    const descriptor = getUniformSetter(gl, location, info);\n    uniformDescriptors[descriptor.name] = descriptor;\n  }\n  return uniformDescriptors;\n}\n\n// Get a map of buffer indices\nexport function getVaryingMap(varyings, bufferMode) {\n  const varyingMap = {};\n  let index = 0;\n  assert(bufferMode === GL.SEPARATE_ATTRIBS || bufferMode === GL.INTERLEAVED_ATTRIBS);\n  const indexIncrement = bufferMode === GL.SEPARATE_ATTRIBS ? 1 : 0;\n  for (const varying of varyings) {\n    varyingMap[varying] = index;\n    index += indexIncrement;\n  }\n  return varyingMap;\n}\n"]}