{"version":3,"sources":["../../src/webgl/vertex-array.js"],"names":["OES_vertex_array_object","GL_ELEMENT_ARRAY_BUFFER","GL_VERTEX_ATTRIB_ARRAY_ENABLED","GL_VERTEX_ATTRIB_ARRAY_SIZE","GL_VERTEX_ATTRIB_ARRAY_STRIDE","GL_VERTEX_ATTRIB_ARRAY_TYPE","GL_VERTEX_ATTRIB_ARRAY_NORMALIZED","GL_VERTEX_ATTRIB_ARRAY_POINTER","GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING","GL_VERTEX_ATTRIB_ARRAY_INTEGER","GL_VERTEX_ATTRIB_ARRAY_DIVISOR","PARAMETERS","ERR_ELEMENTS","VertexArray","gl","getParameter","MAX_VERTEX_ATTRIBS","getExtension","luma","defaultVertexArray","handle","opts","elements","buffers","locations","names","drawParameters","_bound","_filledLocations","Object","seal","initialize","setLocations","setBuffers","clear","setElements","target","ext","bindVertexArray","bindBuffer","bufferData","buffer","layout","assign","clearBindings","_getLocations","location","_getBufferAndLayout","setBuffer","setDivisor","instanced","enable","disable","bind","enableVertexAttribArray","disableZero","disableVertexAttribArray","divisor","vertexAttribDivisor","undefined","ARRAY_BUFFER","size","type","normalized","stride","offset","integer","vertexAttribPointer","vertexAttribIPointer","array","constructor","Float32Array","_setGenericFloatArray","Int32Array","_setGenericIntArray","Uint32Array","_setGenericUintArray","setGenericValues","length","vertexAttrib1fv","vertexAttrib2fv","vertexAttrib3fv","vertexAttrib4fv","vertexAttribI1iv","vertexAttribI2iv","vertexAttribI3iv","vertexAttribI4iv","vertexAttribI1uiv","vertexAttribI2uiv","vertexAttribI3uiv","vertexAttribI4uiv","v0","v1","v2","v3","arguments","vertexAttrib1f","vertexAttrib2f","vertexAttrib3f","vertexAttrib4f","funcOrHandle","value","isInstanced","isIndexed","indexType","forEach","bufferName","Number","isFinite","Array","_attributeCount","fill","_warn","warn","_print","createVertexArray","deleteVertexArray","pname","result","getVertexAttribOffset","getVertexAttrib","MAX_ATTRIBUTES","map","_","parameter"],"mappings":"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","file":"vertex-array.js","sourcesContent":["// WebGL2 VertexArray Objects Helper\nimport {glKey} from './gl-constants';\nimport {isWebGL2} from './context';\nimport Resource from './resource';\nimport assert from 'assert';\nimport {log} from '../utils';\n\n/* eslint-disable camelcase */\nconst OES_vertex_array_object = 'OES_vertex_array_object';\n\nconst GL_ELEMENT_ARRAY_BUFFER = 0x8893;\n\n// const GL_CURRENT_VERTEX_ATTRIB = 0x8626;\n\nconst GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;\nconst GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;\nconst GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;\nconst GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;\nconst GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;\nconst GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;\nconst GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\n\nconst GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;\nconst GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;\n\nconst PARAMETERS = [\n  GL_VERTEX_ATTRIB_ARRAY_ENABLED,\n  GL_VERTEX_ATTRIB_ARRAY_SIZE,\n  GL_VERTEX_ATTRIB_ARRAY_STRIDE,\n  GL_VERTEX_ATTRIB_ARRAY_TYPE,\n  GL_VERTEX_ATTRIB_ARRAY_NORMALIZED,\n  GL_VERTEX_ATTRIB_ARRAY_POINTER,\n  GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,\n\n  GL_VERTEX_ATTRIB_ARRAY_INTEGER,\n  GL_VERTEX_ATTRIB_ARRAY_DIVISOR\n];\n\nconst ERR_ELEMENTS = 'elements must be GL.ELEMENT_ARRAY_BUFFER';\n\nexport default class VertexArray extends Resource {\n\n  static isSupported(gl) {\n    return isWebGL2(gl) || gl.getExtension(OES_vertex_array_object);\n  }\n\n  static getDefaultArray(gl) {\n    gl.luma = gl.luma || {};\n    if (!gl.luma.defaultVertexArray) {\n      gl.luma.defaultVertexArray = new VertexArray(gl, {handle: null});\n    }\n    return gl.luma.defaultVertexArray;\n  }\n\n  static getMaxAttributes(gl) {\n    return gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n  }\n\n  get MAX_ATTRIBUTES() {\n    return this.gl.getParameter(this.gl.MAX_VERTEX_ATTRIBS);\n  }\n\n  // Create a VertexArray\n  constructor(gl, opts = {}) {\n    super(gl, opts);\n\n    this.elements = null;\n    this.buffers = {}; // new Array(this.MAX_VERTEX_ATTRIBS).fill(null);\n    this.locations = {};\n    this.names = {};\n    this.drawParameters = {};\n\n    this._bound = false;\n    this._filledLocations = {};\n    Object.seal(this);\n\n    this.initialize(opts);\n  }\n\n  initialize({\n    buffers = {},\n    elements = null,\n    locations = {}\n  } = {}) {\n    this.setLocations(locations);\n    this.setBuffers(buffers, {clear: true});\n    this.setElements(elements);\n  }\n\n  get filledLocations() {\n    return this._filledLocations;\n  }\n\n  // Register an optional buffer name to location mapping\n  setLocations(locations) {\n    this.locations = locations;\n    this.names = {};\n  }\n\n  // Set (bind) an elements buffer, for indexed rendering. Must be GL.ELEMENT_ARRAY_BUFFER\n  setElements(elements) {\n    assert(!elements || elements.target === GL_ELEMENT_ARRAY_BUFFER, ERR_ELEMENTS);\n\n    this.ext.bindVertexArray(this.handle);\n    this.gl.bindBuffer(GL_ELEMENT_ARRAY_BUFFER, elements && elements.handle);\n    this.ext.bindVertexArray(null);\n\n    this.elements = elements;\n    return this;\n  }\n\n  // Set (bind) an array or map of vertex array buffers, either in numbered or\n  // named locations. (named locations requires `locations` to have been provided).\n  // For names that are not present in `location`, the supplied buffers will be ignored.\n  // if a single buffer of type GL.ELEMENT_ARRAY_BUFFER is present, it will be set as elements\n  // @param {Object} buffers - An object map with attribute names being keys\n  //   and values are expected to be instances of Buffer.\n\n  _getBufferAndLayout(bufferData) {\n    // Check if buffer was supplied\n    let buffer;\n    let layout;\n    if (bufferData.handle) {\n      buffer = bufferData;\n      layout = bufferData.layout;\n    } else {\n      buffer = bufferData.buffer;\n      layout = Object.assign({}, buffer.layout, bufferData.layout || {}, bufferData);\n    }\n    return {buffer, layout};\n  }\n\n  setBuffers(buffers, {clear = true} = {}) {\n    if (clear) {\n      this.clearBindings();\n    }\n    const {locations, elements} = this._getLocations(buffers);\n\n    this.ext.bindVertexArray(this.handle);\n\n    // Process locations in order\n    for (const location in locations) {\n      const bufferData = locations[location];\n      if (bufferData) {\n        const {buffer, layout} = this._getBufferAndLayout(bufferData);\n        this.setBuffer({location, buffer, layout});\n        this.setDivisor(location, layout.instanced ? 1 : 0);\n        this.enable(location);\n      } else {\n        // DISABLE MISSING ATTRIBUTE\n        this.disable(location);\n      }\n    }\n    this.buffers = buffers;\n\n    this.ext.bindVertexArray(null);\n\n    if (elements) {\n      this.setElements(elements);\n    }\n  }\n\n  // Enable an attribute\n  enable(location) {\n    this.bind(() => {\n      this.gl.enableVertexAttribArray(location);\n    });\n  }\n\n  clearBindings({disableZero = false} = {}) {\n    this.bind(() => {\n      for (const location in this._filledLocations) {\n        if (this._filledLocations[location] && (location > 0 || disableZero)) {\n          this.gl.disableVertexAttribArray(location);\n        }\n      }\n      this._filledLocations = {};\n    });\n  }\n\n  // Disable an attribute\n  // Perf penalty when disabling attribute 0:\n  // https://stackoverflow.com/questions/20305231/webgl-warning-attribute-0-is-disabled-\n  // this-has-significant-performance-penalt\n  disable(location, disableZero = false) {\n    if (location > 0 || disableZero) {\n      this.bind(() => {\n        this.gl.disableVertexAttribArray(location);\n      });\n    }\n  }\n\n  // Set the frequency divisor used for instanced rendering.\n  setDivisor(location, divisor) {\n    this.bind(() => {\n      this.ext.vertexAttribDivisor(location, divisor);\n    });\n  }\n\n  // Set a location in vertex attributes array to a buffer\n  setBuffer({\n    location,\n    buffer,\n    target,\n    layout\n  } = {}) {\n    const {gl} = this;\n\n    // Copy main data characteristics from buffer\n    target = target !== undefined ? target : buffer.target;\n    layout = layout !== undefined ? layout : buffer.layout;\n    assert(target, 'setBuffer needs target');\n    assert(layout, 'setBuffer called on uninitialized buffer');\n    this._filledLocations[location] = true;\n\n    this.bind(() => {\n      // a non-zero named buffer object must be bound to the GL_ARRAY_BUFFER target\n      buffer.bind({target: gl.ARRAY_BUFFER});\n\n      const {size, type, normalized, stride, offset} = layout;\n      // Attach _bound ARRAY_BUFFER with specified buffer format to location\n      if (!layout.integer) {\n        gl.vertexAttribPointer(location, size, type, normalized, stride, offset);\n      } else {\n        // specifies *integer* data formats and locations of vertex attributes\n        assert(isWebGL2(gl));\n        gl.vertexAttribIPointer(location, size, type, stride, offset);\n      }\n    });\n\n  }\n\n  // Specify values for generic vertex attributes\n  setGeneric({location, array}) {\n    this._filledLocations[location] = true;\n    switch (array.constructor) {\n    case Float32Array:\n      this._setGenericFloatArray(location, array);\n      break;\n    case Int32Array:\n      this._setGenericIntArray(location, array);\n      break;\n    case Uint32Array:\n      this._setGenericUintArray(location, array);\n      break;\n    default:\n      this.setGenericValues(location, ...array);\n    }\n  }\n\n  _setGenericFloatArray(location, array) {\n    const {gl} = this;\n    switch (array.length) {\n    case 1: gl.vertexAttrib1fv(location, array); break;\n    case 2: gl.vertexAttrib2fv(location, array); break;\n    case 3: gl.vertexAttrib3fv(location, array); break;\n    case 4: gl.vertexAttrib4fv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setGenericIntArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1iv(location, array); break;\n    case 2: gl.vertexAttribI2iv(location, array); break;\n    case 3: gl.vertexAttribI3iv(location, array); break;\n    case 4: gl.vertexAttribI4iv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  _setGenericUintArray(location, array) {\n    const {gl} = this;\n    assert(isWebGL2(gl));\n    switch (array.length) {\n    case 1: gl.vertexAttribI1uiv(location, array); break;\n    case 2: gl.vertexAttribI2uiv(location, array); break;\n    case 3: gl.vertexAttribI3uiv(location, array); break;\n    case 4: gl.vertexAttribI4uiv(location, array); break;\n    default: assert(false);\n    }\n  }\n\n  // Specify values for generic vertex attributes\n  setGenericValues(location, v0, v1, v2, v3) {\n    const {gl} = this;\n    switch (arguments.length - 1) {\n    case 1: gl.vertexAttrib1f(location, v0); break;\n    case 2: gl.vertexAttrib2f(location, v0, v1); break;\n    case 3: gl.vertexAttrib3f(location, v0, v1, v2); break;\n    case 4: gl.vertexAttrib4f(location, v0, v1, v2, v3); break;\n    default: assert(false);\n    }\n\n    // assert(gl instanceof WebGL2RenderingContext, 'WebGL2 required');\n    // Looks like these will check how many arguments were supplied?\n    // gl.vertexAttribI4i(location, v0, v1, v2, v3);\n    // gl.vertexAttribI4ui(location, v0, v1, v2, v3);\n  }\n\n  bind(funcOrHandle = this.handle) {\n    if (typeof funcOrHandle !== 'function') {\n      this.bindVertexArray(funcOrHandle);\n      return this;\n    }\n\n    let value;\n\n    if (!this._bound) {\n      this.ext.bindVertexArray(this.handle);\n      this._bound = true;\n\n      value = funcOrHandle();\n\n      this.ext.bindVertexArray(null);\n      this._bound = false;\n    } else {\n      value = funcOrHandle();\n    }\n\n    return value;\n  }\n\n  // PRIVATE\n\n  // Auto detect draw parameters from the complement of buffers provided\n  _deduceDrawParameters() {\n    // indexing is autodetected - buffer with target gl.ELEMENT_ARRAY_BUFFER\n    // index type is saved for drawElement calls\n    let isInstanced = false;\n    let isIndexed = false;\n    let indexType = null;\n\n    // Check if we have an elements array buffer\n    if (this.elements) {\n      isIndexed = true;\n      indexType = this.elements.layout.type;\n    }\n\n    // Check if any instanced buffers\n    this.buffers.forEach(buffer => {\n      if (buffer.layout.instanced > 0) {\n        isInstanced = true;\n      }\n    });\n\n    return {isInstanced, isIndexed, indexType};\n  }\n  //         this._filledLocations[bufferName] = true;\n\n  _getLocations(buffers) {\n    // Try to extract elements and locations\n    let elements = null;\n    const locations = {};\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n\n      // Check if this is an elements array\n      if (buffer && buffer.target === GL_ELEMENT_ARRAY_BUFFER) {\n        assert(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');\n        // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');\n        elements = buffer;\n      }\n      // else if (!this._warn[bufferName]) {\n      //   log.warn(2, `${this._print(bufferName)} not used`);\n      //   this._warn[bufferName] = true;\n      // }\n\n      let location = Number(bufferName);\n      // if key is a number, interpret as the location\n      // if key is not a location number, assume it is a named buffer, look it up in supplied map\n      if (!Number.isFinite(location)) {\n        location = this.locations[bufferName];\n      }\n      assert(Number.isFinite(location));\n\n      assert(!locations[location], `Duplicate attribute for binding point ${location}`);\n      locations[location] = buffer;\n    }\n\n    return {locations, elements};\n  }\n\n  _sortBuffersByLocation(buffers) {\n    // Try to extract elements and locations\n    let elements = null;\n    const locations = new Array(this._attributeCount).fill(null);\n\n    for (const bufferName in buffers) {\n      const buffer = buffers[bufferName];\n\n      // Check if this is an elements arrau\n      if (buffer.target === GL_ELEMENT_ARRAY_BUFFER) {\n        assert(!elements, 'Duplicate GL.ELEMENT_ARRAY_BUFFER');\n        // assert(location === undefined, 'GL.ELEMENT_ARRAY_BUFFER assigned to location');\n        elements = buffer;\n      } else if (!this._warn[bufferName]) {\n        log.warn(2, `${this._print(bufferName)} not used`);\n        this._warn[bufferName] = true;\n      }\n\n      let location = Number(bufferName);\n      // if key is a number, interpret as the location\n      // if key is not a location number, assume it is a named buffer, look it up in supplied map\n      if (!Number.isFinite(location)) {\n        location = this.locations[bufferName];\n      }\n      locations[location] = bufferName;\n      assert(locations[location] === null, `Duplicate attribute for binding point ${location}`);\n      locations[location] = location;\n    }\n\n    return {locations, elements};\n  }\n\n  // RESOURCE IMPLEMENTATION\n\n  _createHandle() {\n    return this.ext.createVertexArray();\n  }\n\n  _deleteHandle(handle) {\n    this.ext.deleteVertexArray(handle);\n    return [this.elements];\n    // return [this.elements, ...this.buffers];\n  }\n\n  // Generic getter for information about a vertex attribute at a given position\n  // @param {GLuint} location - index of the vertex attribute.\n  // @param {GLenum} pname - specifies the information to query.\n  // @returns {*} - requested vertex attribute information (specified by pname)\n  _getParameter(pname, {location}) {\n    assert(Number.isFinite(location));\n\n    this.ext.bindVertexArray(this.handle);\n\n    // Let the polyfill intercept the query\n    let result;\n    switch (pname) {\n    case GL_VERTEX_ATTRIB_ARRAY_POINTER:\n      result = this.gl.getVertexAttribOffset(location, pname);\n      break;\n    default:\n      result = this.ext.getVertexAttrib(location, pname);\n    }\n\n    this.ext.bindVertexArray(null);\n    return result;\n  }\n\n  _getData() {\n    return new Array(this.MAX_ATTRIBUTES).fill(0).map((_, location) => {\n      const result = {};\n      PARAMETERS.forEach(parameter => {\n        result[glKey(parameter)] = this.getParameter(parameter, {location});\n      });\n      return result;\n    });\n  }\n\n  _bind(handle) {\n    this.ext.bindVertexArray(handle);\n  }\n}\n"]}