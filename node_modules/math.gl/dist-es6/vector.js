var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import MathArray from './math-array';
import { checkNumber } from './common';

var Vector = function (_MathArray) {
  _inherits(Vector, _MathArray);

  function Vector() {
    _classCallCheck(this, Vector);

    return _possibleConstructorReturn(this, (Vector.__proto__ || Object.getPrototypeOf(Vector)).apply(this, arguments));
  }

  _createClass(Vector, [{
    key: 'len',


    // ACCESSORS

    // NOTE: `length` is a reserved word for Arrays, so we can't use `v.length()`
    // Offer `len` and `magnitude`

    value: function len() {
      return Math.sqrt(this.lengthSquared());
    }
  }, {
    key: 'magnitude',
    value: function magnitude() {
      return Math.sqrt(this.lengthSquared());
    }
  }, {
    key: 'lengthSquared',
    value: function lengthSquared() {
      var length = 0;
      for (var i = 0; i < this.ELEMENTS; ++i) {
        length += this[i] * this[i];
      }
      return length;
    }
  }, {
    key: 'distance',
    value: function distance(mathArray) {
      return Math.sqrt(this.distanceSquared(mathArray));
    }
  }, {
    key: 'distanceSquared',
    value: function distanceSquared(mathArray) {
      var length = 0;
      for (var i = 0; i < this.ELEMENTS; ++i) {
        var dist = this[i] - mathArray[i];
        length += dist * dist;
      }
      return checkNumber(length);
    }
  }, {
    key: 'dot',
    value: function dot(mathArray) {
      var product = 0;
      for (var i = 0; i < this.ELEMENTS; ++i) {
        product += this[i] * mathArray[i];
      }
      return checkNumber(product);
    }

    // MODIFIERS

  }, {
    key: 'normalize',
    value: function normalize() {
      var length = this.magnitude();
      if (length !== 0) {
        for (var i = 0; i < this.ELEMENTS; ++i) {
          this[i] /= length;
        }
      }
      return this.check();
    }
  }]);

  return Vector;
}(MathArray);

export default Vector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy92ZWN0b3IuanMiXSwibmFtZXMiOlsiTWF0aEFycmF5IiwiY2hlY2tOdW1iZXIiLCJWZWN0b3IiLCJNYXRoIiwic3FydCIsImxlbmd0aFNxdWFyZWQiLCJsZW5ndGgiLCJpIiwiRUxFTUVOVFMiLCJtYXRoQXJyYXkiLCJkaXN0YW5jZVNxdWFyZWQiLCJkaXN0IiwicHJvZHVjdCIsIm1hZ25pdHVkZSIsImNoZWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE9BQU9BLFNBQVAsTUFBc0IsY0FBdEI7QUFDQSxTQUFRQyxXQUFSLFFBQTBCLFVBQTFCOztJQUVxQkMsTTs7Ozs7Ozs7Ozs7OztBQUVuQjs7QUFFQTtBQUNBOzswQkFFTTtBQUNKLGFBQU9DLEtBQUtDLElBQUwsQ0FBVSxLQUFLQyxhQUFMLEVBQVYsQ0FBUDtBQUNEOzs7Z0NBRVc7QUFDVixhQUFPRixLQUFLQyxJQUFMLENBQVUsS0FBS0MsYUFBTCxFQUFWLENBQVA7QUFDRDs7O29DQUVlO0FBQ2QsVUFBSUMsU0FBUyxDQUFiO0FBQ0EsV0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS0MsUUFBekIsRUFBbUMsRUFBRUQsQ0FBckMsRUFBd0M7QUFDdENELGtCQUFVLEtBQUtDLENBQUwsSUFBVSxLQUFLQSxDQUFMLENBQXBCO0FBQ0Q7QUFDRCxhQUFPRCxNQUFQO0FBQ0Q7Ozs2QkFFUUcsUyxFQUFXO0FBQ2xCLGFBQU9OLEtBQUtDLElBQUwsQ0FBVSxLQUFLTSxlQUFMLENBQXFCRCxTQUFyQixDQUFWLENBQVA7QUFDRDs7O29DQUVlQSxTLEVBQVc7QUFDekIsVUFBSUgsU0FBUyxDQUFiO0FBQ0EsV0FBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUksS0FBS0MsUUFBekIsRUFBbUMsRUFBRUQsQ0FBckMsRUFBd0M7QUFDdEMsWUFBTUksT0FBTyxLQUFLSixDQUFMLElBQVVFLFVBQVVGLENBQVYsQ0FBdkI7QUFDQUQsa0JBQVVLLE9BQU9BLElBQWpCO0FBQ0Q7QUFDRCxhQUFPVixZQUFZSyxNQUFaLENBQVA7QUFDRDs7O3dCQUVHRyxTLEVBQVc7QUFDYixVQUFJRyxVQUFVLENBQWQ7QUFDQSxXQUFLLElBQUlMLElBQUksQ0FBYixFQUFnQkEsSUFBSSxLQUFLQyxRQUF6QixFQUFtQyxFQUFFRCxDQUFyQyxFQUF3QztBQUN0Q0ssbUJBQVcsS0FBS0wsQ0FBTCxJQUFVRSxVQUFVRixDQUFWLENBQXJCO0FBQ0Q7QUFDRCxhQUFPTixZQUFZVyxPQUFaLENBQVA7QUFDRDs7QUFFRDs7OztnQ0FFWTtBQUNWLFVBQU1OLFNBQVMsS0FBS08sU0FBTCxFQUFmO0FBQ0EsVUFBSVAsV0FBVyxDQUFmLEVBQWtCO0FBQ2hCLGFBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJLEtBQUtDLFFBQXpCLEVBQW1DLEVBQUVELENBQXJDLEVBQXdDO0FBQ3RDLGVBQUtBLENBQUwsS0FBV0QsTUFBWDtBQUNEO0FBQ0Y7QUFDRCxhQUFPLEtBQUtRLEtBQUwsRUFBUDtBQUNEOzs7O0VBdERpQ2QsUzs7ZUFBZkUsTSIsImZpbGUiOiJ2ZWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWF0aEFycmF5IGZyb20gJy4vbWF0aC1hcnJheSc7XG5pbXBvcnQge2NoZWNrTnVtYmVyfSBmcm9tICcuL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlY3RvciBleHRlbmRzIE1hdGhBcnJheSB7XG5cbiAgLy8gQUNDRVNTT1JTXG5cbiAgLy8gTk9URTogYGxlbmd0aGAgaXMgYSByZXNlcnZlZCB3b3JkIGZvciBBcnJheXMsIHNvIHdlIGNhbid0IHVzZSBgdi5sZW5ndGgoKWBcbiAgLy8gT2ZmZXIgYGxlbmAgYW5kIGBtYWduaXR1ZGVgXG5cbiAgbGVuKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW5ndGhTcXVhcmVkKCkpO1xuICB9XG5cbiAgbWFnbml0dWRlKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW5ndGhTcXVhcmVkKCkpO1xuICB9XG5cbiAgbGVuZ3RoU3F1YXJlZCgpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuRUxFTUVOVFM7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IHRoaXNbaV0gKiB0aGlzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9XG5cbiAgZGlzdGFuY2UobWF0aEFycmF5KSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmRpc3RhbmNlU3F1YXJlZChtYXRoQXJyYXkpKTtcbiAgfVxuXG4gIGRpc3RhbmNlU3F1YXJlZChtYXRoQXJyYXkpIHtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuRUxFTUVOVFM7ICsraSkge1xuICAgICAgY29uc3QgZGlzdCA9IHRoaXNbaV0gLSBtYXRoQXJyYXlbaV07XG4gICAgICBsZW5ndGggKz0gZGlzdCAqIGRpc3Q7XG4gICAgfVxuICAgIHJldHVybiBjaGVja051bWJlcihsZW5ndGgpO1xuICB9XG5cbiAgZG90KG1hdGhBcnJheSkge1xuICAgIGxldCBwcm9kdWN0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuRUxFTUVOVFM7ICsraSkge1xuICAgICAgcHJvZHVjdCArPSB0aGlzW2ldICogbWF0aEFycmF5W2ldO1xuICAgIH1cbiAgICByZXR1cm4gY2hlY2tOdW1iZXIocHJvZHVjdCk7XG4gIH1cblxuICAvLyBNT0RJRklFUlNcblxuICBub3JtYWxpemUoKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gdGhpcy5tYWduaXR1ZGUoKTtcbiAgICBpZiAobGVuZ3RoICE9PSAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuRUxFTUVOVFM7ICsraSkge1xuICAgICAgICB0aGlzW2ldIC89IGxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2hlY2soKTtcbiAgfVxufVxuIl19