'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeViewportProps;

var _webMercatorViewport = require('./web-mercator-viewport');

var _webMercatorViewport2 = _interopRequireDefault(_webMercatorViewport);

var _mathUtils = require('./math-utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// defined by mapbox-gl
var MAX_LATITUDE = 85.05113;
var MIN_LATITUDE = -85.05113;

// Apply mathematical constraints to viewport props
/* eslint-disable complexity */
function normalizeViewportProps(_ref) {
  var width = _ref.width,
      height = _ref.height,
      longitude = _ref.longitude,
      latitude = _ref.latitude,
      zoom = _ref.zoom,
      _ref$pitch = _ref.pitch,
      pitch = _ref$pitch === undefined ? 0 : _ref$pitch,
      _ref$bearing = _ref.bearing,
      bearing = _ref$bearing === undefined ? 0 : _ref$bearing;

  // Normalize degrees
  if (longitude < -180 || longitude > 180) {
    longitude = (0, _mathUtils.mod)(longitude + 180, 360) - 180;
  }
  if (bearing < -180 || bearing > 180) {
    bearing = (0, _mathUtils.mod)(bearing + 180, 360) - 180;
  }

  // Constrain zoom and shift center at low zoom levels
  var flatViewport = new _webMercatorViewport2.default({ width: width, height: height, longitude: longitude, latitude: latitude, zoom: zoom });
  var topY = flatViewport.project([longitude, MAX_LATITUDE])[1];
  var bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];
  var shiftY = 0;

  if (bottomY - topY < height) {
    // Map height must not be smaller than viewport height
    // Zoom out map to fit map height into viewport
    zoom += Math.log2(height / (bottomY - topY));

    // Calculate top and bottom using new zoom
    flatViewport = new _webMercatorViewport2.default({ width: width, height: height, longitude: longitude, latitude: latitude, zoom: zoom });
    topY = flatViewport.project([longitude, MAX_LATITUDE])[1];
    bottomY = flatViewport.project([longitude, MIN_LATITUDE])[1];
  }
  if (topY > 0) {
    // Compensate for white gap on top
    shiftY = topY;
  } else if (bottomY < height) {
    // Compensate for white gap on bottom
    shiftY = bottomY - height;
  }
  if (shiftY) {
    latitude = flatViewport.unproject([width / 2, height / 2 + shiftY])[1];
  }

  return { width: width, height: height, longitude: longitude, latitude: latitude, zoom: zoom, pitch: pitch, bearing: bearing };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ub3JtYWxpemUtdmlld3BvcnQtcHJvcHMuanMiXSwibmFtZXMiOlsibm9ybWFsaXplVmlld3BvcnRQcm9wcyIsIk1BWF9MQVRJVFVERSIsIk1JTl9MQVRJVFVERSIsIndpZHRoIiwiaGVpZ2h0IiwibG9uZ2l0dWRlIiwibGF0aXR1ZGUiLCJ6b29tIiwicGl0Y2giLCJiZWFyaW5nIiwiZmxhdFZpZXdwb3J0IiwidG9wWSIsInByb2plY3QiLCJib3R0b21ZIiwic2hpZnRZIiwiTWF0aCIsImxvZzIiLCJ1bnByb2plY3QiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQVN3QkEsc0I7O0FBVHhCOzs7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQU1DLGVBQWUsUUFBckI7QUFDQSxJQUFNQyxlQUFlLENBQUMsUUFBdEI7O0FBRUE7QUFDQTtBQUNlLFNBQVNGLHNCQUFULE9BUVo7QUFBQSxNQVBERyxLQU9DLFFBUERBLEtBT0M7QUFBQSxNQU5EQyxNQU1DLFFBTkRBLE1BTUM7QUFBQSxNQUxEQyxTQUtDLFFBTERBLFNBS0M7QUFBQSxNQUpEQyxRQUlDLFFBSkRBLFFBSUM7QUFBQSxNQUhEQyxJQUdDLFFBSERBLElBR0M7QUFBQSx3QkFGREMsS0FFQztBQUFBLE1BRkRBLEtBRUMsOEJBRk8sQ0FFUDtBQUFBLDBCQUREQyxPQUNDO0FBQUEsTUFEREEsT0FDQyxnQ0FEUyxDQUNUOztBQUNEO0FBQ0EsTUFBSUosWUFBWSxDQUFDLEdBQWIsSUFBb0JBLFlBQVksR0FBcEMsRUFBeUM7QUFDdkNBLGdCQUFZLG9CQUFJQSxZQUFZLEdBQWhCLEVBQXFCLEdBQXJCLElBQTRCLEdBQXhDO0FBQ0Q7QUFDRCxNQUFJSSxVQUFVLENBQUMsR0FBWCxJQUFrQkEsVUFBVSxHQUFoQyxFQUFxQztBQUNuQ0EsY0FBVSxvQkFBSUEsVUFBVSxHQUFkLEVBQW1CLEdBQW5CLElBQTBCLEdBQXBDO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJQyxlQUFlLGtDQUF3QixFQUFDUCxZQUFELEVBQVFDLGNBQVIsRUFBZ0JDLG9CQUFoQixFQUEyQkMsa0JBQTNCLEVBQXFDQyxVQUFyQyxFQUF4QixDQUFuQjtBQUNBLE1BQUlJLE9BQU9ELGFBQWFFLE9BQWIsQ0FBcUIsQ0FBQ1AsU0FBRCxFQUFZSixZQUFaLENBQXJCLEVBQWdELENBQWhELENBQVg7QUFDQSxNQUFJWSxVQUFVSCxhQUFhRSxPQUFiLENBQXFCLENBQUNQLFNBQUQsRUFBWUgsWUFBWixDQUFyQixFQUFnRCxDQUFoRCxDQUFkO0FBQ0EsTUFBSVksU0FBUyxDQUFiOztBQUVBLE1BQUlELFVBQVVGLElBQVYsR0FBaUJQLE1BQXJCLEVBQTZCO0FBQzNCO0FBQ0E7QUFDQUcsWUFBUVEsS0FBS0MsSUFBTCxDQUFVWixVQUFVUyxVQUFVRixJQUFwQixDQUFWLENBQVI7O0FBRUE7QUFDQUQsbUJBQWUsa0NBQXdCLEVBQUNQLFlBQUQsRUFBUUMsY0FBUixFQUFnQkMsb0JBQWhCLEVBQTJCQyxrQkFBM0IsRUFBcUNDLFVBQXJDLEVBQXhCLENBQWY7QUFDQUksV0FBT0QsYUFBYUUsT0FBYixDQUFxQixDQUFDUCxTQUFELEVBQVlKLFlBQVosQ0FBckIsRUFBZ0QsQ0FBaEQsQ0FBUDtBQUNBWSxjQUFVSCxhQUFhRSxPQUFiLENBQXFCLENBQUNQLFNBQUQsRUFBWUgsWUFBWixDQUFyQixFQUFnRCxDQUFoRCxDQUFWO0FBQ0Q7QUFDRCxNQUFJUyxPQUFPLENBQVgsRUFBYztBQUNaO0FBQ0FHLGFBQVNILElBQVQ7QUFDRCxHQUhELE1BR08sSUFBSUUsVUFBVVQsTUFBZCxFQUFzQjtBQUMzQjtBQUNBVSxhQUFTRCxVQUFVVCxNQUFuQjtBQUNEO0FBQ0QsTUFBSVUsTUFBSixFQUFZO0FBQ1ZSLGVBQVdJLGFBQWFPLFNBQWIsQ0FBdUIsQ0FBQ2QsUUFBUSxDQUFULEVBQVlDLFNBQVMsQ0FBVCxHQUFhVSxNQUF6QixDQUF2QixFQUF5RCxDQUF6RCxDQUFYO0FBQ0Q7O0FBRUQsU0FBTyxFQUFDWCxZQUFELEVBQVFDLGNBQVIsRUFBZ0JDLG9CQUFoQixFQUEyQkMsa0JBQTNCLEVBQXFDQyxVQUFyQyxFQUEyQ0MsWUFBM0MsRUFBa0RDLGdCQUFsRCxFQUFQO0FBQ0QiLCJmaWxlIjoibm9ybWFsaXplLXZpZXdwb3J0LXByb3BzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFdlYk1lcmNhdG9yVmlld3BvcnQgZnJvbSAnLi93ZWItbWVyY2F0b3Itdmlld3BvcnQnO1xuaW1wb3J0IHttb2R9ICBmcm9tICcuL21hdGgtdXRpbHMnO1xuXG4vLyBkZWZpbmVkIGJ5IG1hcGJveC1nbFxuY29uc3QgTUFYX0xBVElUVURFID0gODUuMDUxMTM7XG5jb25zdCBNSU5fTEFUSVRVREUgPSAtODUuMDUxMTM7XG5cbi8vIEFwcGx5IG1hdGhlbWF0aWNhbCBjb25zdHJhaW50cyB0byB2aWV3cG9ydCBwcm9wc1xuLyogZXNsaW50LWRpc2FibGUgY29tcGxleGl0eSAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplVmlld3BvcnRQcm9wcyh7XG4gIHdpZHRoLFxuICBoZWlnaHQsXG4gIGxvbmdpdHVkZSxcbiAgbGF0aXR1ZGUsXG4gIHpvb20sXG4gIHBpdGNoID0gMCxcbiAgYmVhcmluZyA9IDBcbn0pIHtcbiAgLy8gTm9ybWFsaXplIGRlZ3JlZXNcbiAgaWYgKGxvbmdpdHVkZSA8IC0xODAgfHwgbG9uZ2l0dWRlID4gMTgwKSB7XG4gICAgbG9uZ2l0dWRlID0gbW9kKGxvbmdpdHVkZSArIDE4MCwgMzYwKSAtIDE4MDtcbiAgfVxuICBpZiAoYmVhcmluZyA8IC0xODAgfHwgYmVhcmluZyA+IDE4MCkge1xuICAgIGJlYXJpbmcgPSBtb2QoYmVhcmluZyArIDE4MCwgMzYwKSAtIDE4MDtcbiAgfVxuXG4gIC8vIENvbnN0cmFpbiB6b29tIGFuZCBzaGlmdCBjZW50ZXIgYXQgbG93IHpvb20gbGV2ZWxzXG4gIGxldCBmbGF0Vmlld3BvcnQgPSBuZXcgV2ViTWVyY2F0b3JWaWV3cG9ydCh7d2lkdGgsIGhlaWdodCwgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgem9vbX0pO1xuICBsZXQgdG9wWSA9IGZsYXRWaWV3cG9ydC5wcm9qZWN0KFtsb25naXR1ZGUsIE1BWF9MQVRJVFVERV0pWzFdO1xuICBsZXQgYm90dG9tWSA9IGZsYXRWaWV3cG9ydC5wcm9qZWN0KFtsb25naXR1ZGUsIE1JTl9MQVRJVFVERV0pWzFdO1xuICBsZXQgc2hpZnRZID0gMDtcblxuICBpZiAoYm90dG9tWSAtIHRvcFkgPCBoZWlnaHQpIHtcbiAgICAvLyBNYXAgaGVpZ2h0IG11c3Qgbm90IGJlIHNtYWxsZXIgdGhhbiB2aWV3cG9ydCBoZWlnaHRcbiAgICAvLyBab29tIG91dCBtYXAgdG8gZml0IG1hcCBoZWlnaHQgaW50byB2aWV3cG9ydFxuICAgIHpvb20gKz0gTWF0aC5sb2cyKGhlaWdodCAvIChib3R0b21ZIC0gdG9wWSkpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIHRvcCBhbmQgYm90dG9tIHVzaW5nIG5ldyB6b29tXG4gICAgZmxhdFZpZXdwb3J0ID0gbmV3IFdlYk1lcmNhdG9yVmlld3BvcnQoe3dpZHRoLCBoZWlnaHQsIGxvbmdpdHVkZSwgbGF0aXR1ZGUsIHpvb219KTtcbiAgICB0b3BZID0gZmxhdFZpZXdwb3J0LnByb2plY3QoW2xvbmdpdHVkZSwgTUFYX0xBVElUVURFXSlbMV07XG4gICAgYm90dG9tWSA9IGZsYXRWaWV3cG9ydC5wcm9qZWN0KFtsb25naXR1ZGUsIE1JTl9MQVRJVFVERV0pWzFdO1xuICB9XG4gIGlmICh0b3BZID4gMCkge1xuICAgIC8vIENvbXBlbnNhdGUgZm9yIHdoaXRlIGdhcCBvbiB0b3BcbiAgICBzaGlmdFkgPSB0b3BZO1xuICB9IGVsc2UgaWYgKGJvdHRvbVkgPCBoZWlnaHQpIHtcbiAgICAvLyBDb21wZW5zYXRlIGZvciB3aGl0ZSBnYXAgb24gYm90dG9tXG4gICAgc2hpZnRZID0gYm90dG9tWSAtIGhlaWdodDtcbiAgfVxuICBpZiAoc2hpZnRZKSB7XG4gICAgbGF0aXR1ZGUgPSBmbGF0Vmlld3BvcnQudW5wcm9qZWN0KFt3aWR0aCAvIDIsIGhlaWdodCAvIDIgKyBzaGlmdFldKVsxXTtcbiAgfVxuXG4gIHJldHVybiB7d2lkdGgsIGhlaWdodCwgbG9uZ2l0dWRlLCBsYXRpdHVkZSwgem9vbSwgcGl0Y2gsIGJlYXJpbmd9O1xufVxuIl19